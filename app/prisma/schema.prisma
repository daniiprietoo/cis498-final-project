// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 

}
// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
  BUSINESS
}

// Application Models
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  password        String?
  image           String?
  role            Role      @default(USER)
  
  accounts        Account[]
  sessions        Session[]
  
  customerId      String?   @unique @map("customer_id")
  paymentId       String?   @map("payment_id")
  
  business        Business?
  orders          Order[]
  reviews         Review[]
  supportRequests SupportRequest[]

  @@map("users")
}

model Business {
  id             String    @id @default(cuid())
  name           String
  description    String    
  status         String    @default("PENDING")
  userId         String    @unique @map("user_id") 
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]

  supportRequests SupportRequest[]

  @@map("businesses")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  price       Decimal   @db.Decimal(10, 2)
  category    String
  url         String?
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  sellerId    String    @map("seller_id")
  seller      Business  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  mainImage   String?   @map("main_image")

  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Order {
  id             String    @id @default(cuid())
  orderDate      DateTime  @default(now()) @map("order_date")
  amount         Decimal   @db.Decimal(10, 2)
  paymentStatus  String    @default("PENDING") @map("payment_status")
  paymentId      String?   @map("payment_id")
  
  buyerId        String    @map("buyer_id")
  buyer          User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  orderItems     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  
  productId   String  @map("product_id")
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  reviewerId  String  @map("reviewer_id")
  reviewer    User    @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model SupportRequest {
  id        String   @id @default(cuid())
  subject   String
  message   String   @db.Text
  status    String   @default("OPEN")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  businessId String?   @map("business_id")
  business   Business? @relation(fields: [businessId], references: [id])

  @@map("support_requests")
}